// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux (in=load, sel=address[14], a=dataMemory, b=ioMemory);
    RAM16K (in=in, load=dataMemory, address=address[0..13], out=out0);
    DMux4Way (in=ioMemory, sel=address[12..13], a=screen1, b=screen2, c=keyboard);
    RAM4K (in=in, load=screen1, address=address[0..11], out=out1);
    RAM4K (in=in, load=screen2, address=address[0..11], out=out2);
    Register (in=in, load=keyboard, out=keyout);
    // Get to the key
    Or8Way (in=address[0..7], out=isNotZero1);
    Or8Way (in[0..3]=address[8..11], out=isNotZero2);
    Or (a=isNotZero1, b=isNotZero2, out=isNotZero);
    Mux16 (a=keyout, sel=isNotZero, out=out3);

    Mux8Way16 (a=out0, b=out0, c=out0, d=out0, e=out1, f=out2, g=out3, sel=address[12..14], out=out);
}
